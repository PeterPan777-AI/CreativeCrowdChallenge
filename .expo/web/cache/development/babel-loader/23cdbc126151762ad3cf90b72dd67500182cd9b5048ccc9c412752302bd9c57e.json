{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _appearance$getColorS;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.colorScheme = void 0;\nvar react_native_1 = require(\"react-native-web/dist/index\");\nvar shared_1 = require(\"../../shared\");\nvar observable_1 = require(\"../observable\");\nvar stylesheet_1 = require(\"./stylesheet\");\nvar appearance = react_native_1.Appearance;\nvar appearanceListener;\nvar darkModeFlag = stylesheet_1.StyleSheet.getFlag(\"darkMode\");\nvar darkMode;\nvar darkModeValue;\nvar initialColor = undefined;\nif (darkModeFlag) {\n  var flags = darkModeFlag.split(\" \");\n  darkMode = flags[0];\n  darkModeValue = flags[1];\n  if (darkMode === \"class\") {\n    initialColor = \"window\" in globalThis.window && globalThis.window.document.documentElement.classList.contains(darkModeValue) ? \"dark\" : \"light\";\n  }\n} else if (\"window\" in globalThis) {\n  var headNode = globalThis.window.document.getElementsByTagName(\"head\")[0];\n  new MutationObserver(function (_, observer) {\n    var darkModeFlag = stylesheet_1.StyleSheet.getFlag(\"darkMode\");\n    if (!darkModeFlag) return;\n    observer.disconnect();\n    var flags = darkModeFlag.split(\" \");\n    darkMode = flags[0];\n    darkModeValue = flags[1];\n    exports.colorScheme.set(globalThis.window.document.documentElement.classList.contains(darkModeValue) ? \"dark\" : \"system\");\n  }).observe(headNode, {\n    attributes: false,\n    childList: true,\n    subtree: false\n  });\n}\nvar systemColorScheme = (0, observable_1.observable)((_appearance$getColorS = appearance.getColorScheme()) != null ? _appearance$getColorS : \"light\");\nvar colorSchemeObservable = (0, observable_1.observable)(initialColor, {\n  fallback: systemColorScheme\n});\nexports.colorScheme = _defineProperty({\n  set: function set(value) {\n    if (darkMode === \"media\") {\n      throw new Error(\"Cannot manually set color scheme, as dark mode is type 'media'. Please use StyleSheet.setFlag('darkMode', 'class')\");\n    }\n    if (!globalThis.window) {\n      throw new Error(\"Cannot manually set color scheme while not in a browser environment.\");\n    }\n    if (value === \"system\") {\n      colorSchemeObservable.set(undefined);\n    } else {\n      colorSchemeObservable.set(value);\n    }\n    if (darkModeValue) {\n      if (value === \"dark\") {\n        var _globalThis$window;\n        (_globalThis$window = globalThis.window) == null ? void 0 : _globalThis$window.document.documentElement.classList.add(darkModeValue);\n      } else {\n        var _globalThis$window2;\n        (_globalThis$window2 = globalThis.window) == null ? void 0 : _globalThis$window2.document.documentElement.classList.remove(darkModeValue);\n      }\n    }\n  },\n  get: colorSchemeObservable.get,\n  toggle: function toggle() {\n    var _appearance$getColorS2;\n    var current = colorSchemeObservable.get();\n    if (current === undefined) current = (_appearance$getColorS2 = appearance.getColorScheme()) != null ? _appearance$getColorS2 : \"light\";\n    exports.colorScheme.set(current === \"light\" ? \"dark\" : \"light\");\n  }\n}, shared_1.INTERNAL_RESET, function (appearance) {\n  colorSchemeObservable.set(undefined);\n  resetAppearanceListeners(appearance);\n});\nfunction resetAppearanceListeners($appearance) {\n  var _appearanceListener;\n  appearance = $appearance;\n  (_appearanceListener = appearanceListener) == null ? void 0 : _appearanceListener.remove();\n  appearanceListener = appearance.addChangeListener(function (state) {\n    if (react_native_1.AppState.currentState === \"active\") {\n      var _state$colorScheme;\n      systemColorScheme.set((_state$colorScheme = state.colorScheme) != null ? _state$colorScheme : \"light\");\n    }\n  });\n}\nresetAppearanceListeners(appearance);","map":{"version":3,"names":["shared_1","require","observable_1","stylesheet_1","appearance","react_native_1","Appearance","appearanceListener","darkModeFlag","StyleSheet","getFlag","darkMode","darkModeValue","initialColor","undefined","flags","split","globalThis","window","document","documentElement","classList","contains","headNode","getElementsByTagName","MutationObserver","_","observer","disconnect","exports","colorScheme","set","observe","attributes","childList","subtree","systemColorScheme","observable","_appearance$getColorS","getColorScheme","colorSchemeObservable","fallback","_defineProperty","value","Error","_globalThis$window","add","_globalThis$window2","remove","get","toggle","_appearance$getColorS2","current","INTERNAL_RESET","resetAppearanceListeners","$appearance","_appearanceListener","addChangeListener","state","AppState","currentState","_state$colorScheme"],"sources":["/home/runner/workspace/node_modules/react-native-css-interop/src/runtime/web/color-scheme.ts"],"sourcesContent":["import { Appearance, AppState, NativeEventSubscription } from \"react-native\";\n\nimport { INTERNAL_RESET } from \"../../shared\";\nimport { observable } from \"../observable\";\nimport { StyleSheet } from \"./stylesheet\";\n\nlet appearance = Appearance;\nlet appearanceListener: NativeEventSubscription | undefined;\n\nconst darkModeFlag = StyleSheet.getFlag(\"darkMode\");\n\nlet darkMode: string | undefined;\nlet darkModeValue: string | undefined;\nlet initialColor: \"light\" | \"dark\" | undefined = undefined;\n\nif (darkModeFlag) {\n  const flags = darkModeFlag.split(\" \");\n  darkMode = flags[0];\n  darkModeValue = flags[1];\n\n  if (darkMode === \"class\") {\n    initialColor =\n      \"window\" in globalThis.window &&\n      globalThis.window.document.documentElement.classList.contains(\n        darkModeValue,\n      )\n        ? \"dark\"\n        : \"light\";\n  }\n} else if (\"window\" in globalThis) {\n  // In development, Expo might insert the StyleSheet AFTER this code runs.\n  // Instead we watch for the stylesheet being added\n  const headNode = globalThis.window.document.getElementsByTagName(\"head\")[0];\n  new MutationObserver(function (_, observer) {\n    // We don't actually care what the mutation is, just wait until we have a darkMode setting\n    const darkModeFlag = StyleSheet.getFlag(\"darkMode\");\n    if (!darkModeFlag) return;\n\n    // We have the flag, so we can remove the observer\n    observer.disconnect();\n    const flags = darkModeFlag.split(\" \");\n    darkMode = flags[0];\n    darkModeValue = flags[1];\n    colorScheme.set(\n      globalThis.window.document.documentElement.classList.contains(\n        darkModeValue,\n      )\n        ? \"dark\"\n        : \"system\",\n    );\n  }).observe(headNode, { attributes: false, childList: true, subtree: false });\n}\n\nconst systemColorScheme = observable<\"light\" | \"dark\">(\n  appearance.getColorScheme() ?? \"light\",\n);\n\nconst colorSchemeObservable = observable<\"light\" | \"dark\" | undefined>(\n  initialColor,\n  { fallback: systemColorScheme },\n);\n\nexport const colorScheme = {\n  set(value: \"light\" | \"dark\" | \"system\") {\n    if (darkMode === \"media\") {\n      throw new Error(\n        \"Cannot manually set color scheme, as dark mode is type 'media'. Please use StyleSheet.setFlag('darkMode', 'class')\",\n      );\n    }\n\n    if (!globalThis.window) {\n      throw new Error(\n        \"Cannot manually set color scheme while not in a browser environment.\",\n      );\n    }\n\n    if (value === \"system\") {\n      colorSchemeObservable.set(undefined);\n    } else {\n      colorSchemeObservable.set(value);\n    }\n\n    if (darkModeValue) {\n      if (value === \"dark\") {\n        globalThis.window?.document.documentElement.classList.add(\n          darkModeValue,\n        );\n      } else {\n        globalThis.window?.document.documentElement.classList.remove(\n          darkModeValue,\n        );\n      }\n    }\n  },\n  get: colorSchemeObservable.get,\n  toggle() {\n    let current = colorSchemeObservable.get();\n    if (current === undefined) current = appearance.getColorScheme() ?? \"light\";\n    colorScheme.set(current === \"light\" ? \"dark\" : \"light\");\n  },\n  [INTERNAL_RESET]: (appearance: typeof Appearance) => {\n    colorSchemeObservable.set(undefined);\n    resetAppearanceListeners(appearance);\n  },\n};\n\nfunction resetAppearanceListeners($appearance: typeof Appearance) {\n  appearance = $appearance;\n  appearanceListener?.remove();\n  appearanceListener = appearance.addChangeListener((state) => {\n    if (AppState.currentState === \"active\") {\n      systemColorScheme.set(state.colorScheme ?? \"light\");\n    }\n  });\n}\nresetAppearanceListeners(appearance);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}