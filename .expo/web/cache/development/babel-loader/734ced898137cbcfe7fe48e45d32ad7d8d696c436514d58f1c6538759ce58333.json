{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.observable = observable;\nexports.cleanupEffect = cleanupEffect;\nfunction observable(value) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    fallback = _ref.fallback,\n    name = _ref.name;\n  var effects = new Set();\n  return {\n    name: name,\n    get: function get(effect) {\n      var _value;\n      if (effect) {\n        effects.add(effect);\n        effect.dependencies.add(function () {\n          return effects.delete(effect);\n        });\n      }\n      return (_value = value) != null ? _value : fallback == null ? void 0 : fallback.get(effect);\n    },\n    set: function set(newValue) {\n      if (Object.is(newValue, value)) return;\n      value = newValue;\n      for (var effect of Array.from(effects)) {\n        effect.run();\n      }\n    }\n  };\n}\nfunction cleanupEffect(effect) {\n  for (var dep of Array.from(effect.dependencies)) {\n    dep();\n  }\n  effect.dependencies.clear();\n}","map":{"version":3,"names":["exports","observable","cleanupEffect","value","_ref","arguments","length","undefined","fallback","name","effects","Set","get","effect","_value","add","dependencies","delete","set","newValue","Object","is","Array","from","run","dep","clear"],"sources":["/home/runner/workspace/node_modules/react-native-css-interop/src/runtime/observable.ts"],"sourcesContent":["/**\n * Observer pattern implementation\n *\n * Observables are used to store reactive values. When you access the value of an Observable,\n * with an Effect, it will subscribe the Effect to the Observable. When the value of the Observable\n * is changed, it will rerun all subscribed Effects.\n */\n\nexport type Observable<T> = {\n  // Used for debugging only\n  name?: string;\n  // Get the current value of the observable. If you provide an Effect, it will be subscribed to the observable.\n  get(effect?: Effect): T;\n  // Set the value and rerun all subscribed Effects\n  set(newValue: T): void;\n};\n\nexport type ReadableObservable<T> = Pick<Observable<T>, \"get\" | \"name\">;\n\n/**\n * An Effect is a function that will be rerun when its dependencies change.\n */\nexport type Effect = {\n  run: () => void;\n  dependencies: Set<() => void>;\n};\n\nexport type ObservableOptions<T> = {\n  fallback?: Observable<T>;\n  name?: string;\n};\n\nexport function observable<T>(\n  value: T,\n  { fallback, name }: ObservableOptions<T> = {},\n): Observable<T> {\n  const effects = new Set<Effect>();\n\n  return {\n    name,\n    get(effect) {\n      if (effect) {\n        // Subscribe the effect to the observable\n        effects.add(effect);\n        effect.dependencies.add(() => effects.delete(effect));\n      }\n      return value ?? fallback?.get(effect)!;\n    },\n\n    set(newValue: any) {\n      if (Object.is(newValue, value)) return;\n      value = newValue;\n      // We changed, so rerun all subscribed effects\n      // We need to copy the effects set because rerunning an effect might resubscribe it\n      for (const effect of Array.from(effects)) {\n        effect.run();\n      }\n    },\n  };\n}\n\nexport function cleanupEffect(effect: Effect) {\n  for (const dep of Array.from(effect.dependencies)) {\n    dep();\n  }\n  effect.dependencies.clear();\n}\n"],"mappings":";;;;;AAgCAA,OAAA,CAAAC,UAAA,GAAAA,UAAA;AA6BAD,OAAA,CAAAE,aAAA,GAAAA,aAAA;AA7BA,SAAgBD,UAAUA,CACxBE,KAAQ,EACqC;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAF,EAAE;IAA3CG,QAAQ,GAAAJ,IAAA,CAARI,QAAQ;IAAEC,IAAI,GAAAL,IAAA,CAAJK,IAAI;EAEhB,IAAMC,OAAO,GAAG,IAAIC,GAAG,EAAU;EAEjC,OAAO;IACLF,IAAI,EAAJA,IAAI;IACJG,GAAG,WAAHA,GAAGA,CAACC,MAAM;MAAA,IAAAC,MAAA;MACR,IAAID,MAAM,EAAE;QAEVH,OAAO,CAACK,GAAG,CAACF,MAAM,CAAC;QACnBA,MAAM,CAACG,YAAY,CAACD,GAAG,CAAC;UAAA,OAAML,OAAO,CAACO,MAAM,CAACJ,MAAM,CAAC;QAAA,EAAC;MACvD;MACA,QAAAC,MAAA,GAAOX,KAAK,YAAAW,MAAA,GAAIN,QAAQ,oBAARA,QAAQ,CAAEI,GAAG,CAACC,MAAM,CAAE;IACxC,CAAC;IAEDK,GAAG,WAAHA,GAAGA,CAACC,QAAa;MACf,IAAIC,MAAM,CAACC,EAAE,CAACF,QAAQ,EAAEhB,KAAK,CAAC,EAAE;MAChCA,KAAK,GAAGgB,QAAQ;MAGhB,KAAK,IAAMN,MAAM,IAAIS,KAAK,CAACC,IAAI,CAACb,OAAO,CAAC,EAAE;QACxCG,MAAM,CAACW,GAAG,EAAE;MACd;IACF;GACD;AACH;AAEA,SAAgBtB,aAAaA,CAACW,MAAc;EAC1C,KAAK,IAAMY,GAAG,IAAIH,KAAK,CAACC,IAAI,CAACV,MAAM,CAACG,YAAY,CAAC,EAAE;IACjDS,GAAG,EAAE;EACP;EACAZ,MAAM,CAACG,YAAY,CAACU,KAAK,EAAE;AAC7B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}