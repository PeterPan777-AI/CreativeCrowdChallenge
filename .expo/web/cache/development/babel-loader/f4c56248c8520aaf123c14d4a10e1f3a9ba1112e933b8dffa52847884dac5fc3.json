{"ast":null,"code":"import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\nimport 'react-native-url-polyfill/auto';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || '';\nvar supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';\nconsole.log('Supabase URL available:', !!supabaseUrl);\nconsole.log('Supabase Anon Key available:', !!supabaseAnonKey);\nif (Platform.OS === 'web') {\n  var debugElement = document.createElement('div');\n  debugElement.id = 'debug-info';\n  debugElement.style.position = 'fixed';\n  debugElement.style.top = '10px';\n  debugElement.style.left = '10px';\n  debugElement.style.backgroundColor = 'rgba(0,0,0,0.7)';\n  debugElement.style.color = 'white';\n  debugElement.style.padding = '10px';\n  debugElement.style.zIndex = '9999';\n  debugElement.style.borderRadius = '5px';\n  debugElement.style.fontSize = '14px';\n  debugElement.innerText = `Supabase URL: ${supabaseUrl ? 'Available' : 'Missing'}\nSupabase Anon Key: ${supabaseAnonKey ? 'Available' : 'Missing'}`;\n  if (document.body) {\n    document.body.appendChild(debugElement);\n  } else {\n    window.addEventListener('DOMContentLoaded', function () {\n      document.body.appendChild(debugElement);\n    });\n  }\n}\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Supabase credentials are missing!');\n  if (Platform.OS !== 'web') {\n    Alert.alert('Configuration Error', 'Supabase credentials are missing. Please check your environment variables.');\n  }\n}\nvar supabase;\ntry {\n  supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      storage: AsyncStorage,\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false\n    }\n  });\n  console.log('Supabase client initialized successfully');\n} catch (error) {\n  console.error('Failed to initialize Supabase client:', error);\n  supabase = {\n    auth: {\n      signIn: function signIn() {\n        return Promise.reject(new Error('Supabase client not initialized'));\n      },\n      signUp: function signUp() {\n        return Promise.reject(new Error('Supabase client not initialized'));\n      },\n      signOut: function signOut() {\n        return Promise.reject(new Error('Supabase client not initialized'));\n      },\n      onAuthStateChange: function onAuthStateChange() {\n        return {\n          data: null,\n          error: new Error('Supabase client not initialized')\n        };\n      },\n      getSession: function getSession() {\n        return Promise.resolve({\n          data: null,\n          error: new Error('Supabase client not initialized')\n        });\n      }\n    },\n    from: function from() {\n      return {\n        select: function select() {\n          return {\n            eq: function eq() {\n              return {\n                single: function single() {\n                  return Promise.reject(new Error('Supabase client not initialized'));\n                }\n              };\n            }\n          };\n        },\n        insert: function insert() {\n          return Promise.reject(new Error('Supabase client not initialized'));\n        }\n      };\n    }\n  };\n}\nexport default supabase;","map":{"version":3,"names":["AsyncStorage","createClient","Alert","Platform","supabaseUrl","process","env","EXPO_PUBLIC_SUPABASE_URL","supabaseAnonKey","EXPO_PUBLIC_SUPABASE_ANON_KEY","console","log","OS","debugElement","document","createElement","id","style","position","top","left","backgroundColor","color","padding","zIndex","borderRadius","fontSize","innerText","body","appendChild","window","addEventListener","error","alert","supabase","auth","storage","autoRefreshToken","persistSession","detectSessionInUrl","signIn","Promise","reject","Error","signUp","signOut","onAuthStateChange","data","getSession","resolve","from","select","eq","single","insert"],"sources":["/home/runner/workspace/src/utils/supabaseClient.js"],"sourcesContent":["import AsyncStorage from '@react-native-async-storage/async-storage';\nimport { createClient } from '@supabase/supabase-js';\nimport 'react-native-url-polyfill/auto';\nimport { Alert, Platform } from 'react-native';\n\n// Get Supabase URL and key from environment variables\nconst supabaseUrl = process.env.EXPO_PUBLIC_SUPABASE_URL || '';\nconst supabaseAnonKey = process.env.EXPO_PUBLIC_SUPABASE_ANON_KEY || '';\n\n// Debug logging - this will show in dev console\nconsole.log('Supabase URL available:', !!supabaseUrl);\nconsole.log('Supabase Anon Key available:', !!supabaseAnonKey);\n\n// More visible debugging in web\nif (Platform.OS === 'web') {\n  // Add a div to the document to display debug info\n  const debugElement = document.createElement('div');\n  debugElement.id = 'debug-info';\n  debugElement.style.position = 'fixed';\n  debugElement.style.top = '10px';\n  debugElement.style.left = '10px';\n  debugElement.style.backgroundColor = 'rgba(0,0,0,0.7)';\n  debugElement.style.color = 'white';\n  debugElement.style.padding = '10px';\n  debugElement.style.zIndex = '9999';\n  debugElement.style.borderRadius = '5px';\n  debugElement.style.fontSize = '14px';\n  \n  debugElement.innerText = `Supabase URL: ${supabaseUrl ? 'Available' : 'Missing'}\nSupabase Anon Key: ${supabaseAnonKey ? 'Available' : 'Missing'}`;\n  \n  // Wait for document to be ready\n  if (document.body) {\n    document.body.appendChild(debugElement);\n  } else {\n    window.addEventListener('DOMContentLoaded', () => {\n      document.body.appendChild(debugElement);\n    });\n  }\n}\n\n// Check if credentials are missing\nif (!supabaseUrl || !supabaseAnonKey) {\n  console.error('Supabase credentials are missing!');\n  \n  if (Platform.OS !== 'web') {\n    Alert.alert(\n      'Configuration Error',\n      'Supabase credentials are missing. Please check your environment variables.'\n    );\n  }\n}\n\n// Initialize the Supabase client\nlet supabase;\ntry {\n  supabase = createClient(supabaseUrl, supabaseAnonKey, {\n    auth: {\n      storage: AsyncStorage,\n      autoRefreshToken: true,\n      persistSession: true,\n      detectSessionInUrl: false,\n    },\n  });\n  console.log('Supabase client initialized successfully');\n} catch (error) {\n  console.error('Failed to initialize Supabase client:', error);\n  // Create a non-functional client to prevent app crashes\n  supabase = {\n    auth: {\n      signIn: () => Promise.reject(new Error('Supabase client not initialized')),\n      signUp: () => Promise.reject(new Error('Supabase client not initialized')),\n      signOut: () => Promise.reject(new Error('Supabase client not initialized')),\n      onAuthStateChange: () => ({ data: null, error: new Error('Supabase client not initialized') }),\n      getSession: () => Promise.resolve({ data: null, error: new Error('Supabase client not initialized') }),\n    },\n    from: () => ({\n      select: () => ({ eq: () => ({ single: () => Promise.reject(new Error('Supabase client not initialized')) }) }),\n      insert: () => Promise.reject(new Error('Supabase client not initialized')),\n    }),\n  };\n}\n\nexport default supabase;\n"],"mappings":"AAAA,OAAOA,YAAY,MAAM,2CAA2C;AACpE,SAASC,YAAY,QAAQ,uBAAuB;AACpD,OAAO,gCAAgC;AAAC,OAAAC,KAAA;AAAA,OAAAC,QAAA;AAIxC,IAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,wBAAwB,IAAI,EAAE;AAC9D,IAAMC,eAAe,GAAGH,OAAO,CAACC,GAAG,CAACG,6BAA6B,IAAI,EAAE;AAGvEC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE,CAAC,CAACP,WAAW,CAAC;AACrDM,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE,CAAC,CAACH,eAAe,CAAC;AAG9D,IAAIL,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;EAEzB,IAAMC,YAAY,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;EAClDF,YAAY,CAACG,EAAE,GAAG,YAAY;EAC9BH,YAAY,CAACI,KAAK,CAACC,QAAQ,GAAG,OAAO;EACrCL,YAAY,CAACI,KAAK,CAACE,GAAG,GAAG,MAAM;EAC/BN,YAAY,CAACI,KAAK,CAACG,IAAI,GAAG,MAAM;EAChCP,YAAY,CAACI,KAAK,CAACI,eAAe,GAAG,iBAAiB;EACtDR,YAAY,CAACI,KAAK,CAACK,KAAK,GAAG,OAAO;EAClCT,YAAY,CAACI,KAAK,CAACM,OAAO,GAAG,MAAM;EACnCV,YAAY,CAACI,KAAK,CAACO,MAAM,GAAG,MAAM;EAClCX,YAAY,CAACI,KAAK,CAACQ,YAAY,GAAG,KAAK;EACvCZ,YAAY,CAACI,KAAK,CAACS,QAAQ,GAAG,MAAM;EAEpCb,YAAY,CAACc,SAAS,GAAG,iBAAiBvB,WAAW,GAAG,WAAW,GAAG,SAAS;AACjF,qBAAqBI,eAAe,GAAG,WAAW,GAAG,SAAS,EAAE;EAG9D,IAAIM,QAAQ,CAACc,IAAI,EAAE;IACjBd,QAAQ,CAACc,IAAI,CAACC,WAAW,CAAChB,YAAY,CAAC;EACzC,CAAC,MAAM;IACLiB,MAAM,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAM;MAChDjB,QAAQ,CAACc,IAAI,CAACC,WAAW,CAAChB,YAAY,CAAC;IACzC,CAAC,CAAC;EACJ;AACF;AAGA,IAAI,CAACT,WAAW,IAAI,CAACI,eAAe,EAAE;EACpCE,OAAO,CAACsB,KAAK,CAAC,mCAAmC,CAAC;EAElD,IAAI7B,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;IACzBV,KAAK,CAAC+B,KAAK,CACT,qBAAqB,EACrB,4EACF,CAAC;EACH;AACF;AAGA,IAAIC,QAAQ;AACZ,IAAI;EACFA,QAAQ,GAAGjC,YAAY,CAACG,WAAW,EAAEI,eAAe,EAAE;IACpD2B,IAAI,EAAE;MACJC,OAAO,EAAEpC,YAAY;MACrBqC,gBAAgB,EAAE,IAAI;MACtBC,cAAc,EAAE,IAAI;MACpBC,kBAAkB,EAAE;IACtB;EACF,CAAC,CAAC;EACF7B,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;AACzD,CAAC,CAAC,OAAOqB,KAAK,EAAE;EACdtB,OAAO,CAACsB,KAAK,CAAC,uCAAuC,EAAEA,KAAK,CAAC;EAE7DE,QAAQ,GAAG;IACTC,IAAI,EAAE;MACJK,MAAM,EAAE,SAARA,MAAMA,CAAA;QAAA,OAAQC,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAC;MAAA;MAC1EC,MAAM,EAAE,SAARA,MAAMA,CAAA;QAAA,OAAQH,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAC;MAAA;MAC1EE,OAAO,EAAE,SAATA,OAAOA,CAAA;QAAA,OAAQJ,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAC;MAAA;MAC3EG,iBAAiB,EAAE,SAAnBA,iBAAiBA,CAAA;QAAA,OAAS;UAAEC,IAAI,EAAE,IAAI;UAAEf,KAAK,EAAE,IAAIW,KAAK,CAAC,iCAAiC;QAAE,CAAC;MAAA,CAAC;MAC9FK,UAAU,EAAE,SAAZA,UAAUA,CAAA;QAAA,OAAQP,OAAO,CAACQ,OAAO,CAAC;UAAEF,IAAI,EAAE,IAAI;UAAEf,KAAK,EAAE,IAAIW,KAAK,CAAC,iCAAiC;QAAE,CAAC,CAAC;MAAA;IACxG,CAAC;IACDO,IAAI,EAAE,SAANA,IAAIA,CAAA;MAAA,OAAS;QACXC,MAAM,EAAE,SAARA,MAAMA,CAAA;UAAA,OAAS;YAAEC,EAAE,EAAE,SAAJA,EAAEA,CAAA;cAAA,OAAS;gBAAEC,MAAM,EAAE,SAARA,MAAMA,CAAA;kBAAA,OAAQZ,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAC;gBAAA;cAAC,CAAC;YAAA;UAAE,CAAC;QAAA,CAAC;QAC9GW,MAAM,EAAE,SAARA,MAAMA,CAAA;UAAA,OAAQb,OAAO,CAACC,MAAM,CAAC,IAAIC,KAAK,CAAC,iCAAiC,CAAC,CAAC;QAAA;MAC5E,CAAC;IAAA;EACH,CAAC;AACH;AAEA,eAAeT,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}